#ifndef EVALUATE_H
#define EVALUATE_H

#include "defines.h"
#include "types.h"

// Valeur des pièces
//  mg = middle game
//  eg = end game

// Idée de Stockfish, reprise par de nombreux codes

/// Score enum stores a middlegame and an endgame value in a single integer (enum).
/// The least significant 16 bits are used to store the middlegame value and the
/// upper 16 bits are used to store the endgame value. We have to take care to
/// avoid left-shifting a signed int to avoid undefined behavior.

#define MakeScore(mg, eg) ((int)((unsigned int)(eg) << 16) + (mg))
#define S(mg, eg) MakeScore((mg), (eg))
#define MgScore(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define EgScore(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))


//-----------------------------------------------------------------
//  Tables PeSTO
//  Valeurs de Weiss (1.3)
//-----------------------------------------------------------------
//http://www.talkchess.com/forum3/viewtopic.php?f=2&t=68311

//  Valeur des pièces
constexpr Score meg_value[7] = {
    0, S(P_MG, P_EG), S(N_MG, N_EG), S(B_MG, B_EG), S(R_MG, R_EG), S(Q_MG, Q_EG), 0
};
constexpr Score mg_value[7] = {
    0, P_MG, N_MG, B_MG, R_MG, Q_MG, 0
};

//  Bonus positionnel des pièces
constexpr int meg_pawn_table[64] = {
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
    S(  -7,    7), S( -12,    1), S( -15,    7), S(  -6,    3), S( -11,   11), S(  11,   10), S(  15,  -10), S(   1,  -21),
    S( -18,    2), S( -22,   -4), S( -18,   -4), S( -12,  -10), S(  -6,   -3), S(  -6,    0), S(  -1,  -14), S(  -9,  -13),
    S( -14,   12), S( -14,    7), S(  -3,  -12), S(   0,  -18), S(   8,  -18), S(   5,  -12), S(  -5,   -6), S( -14,   -6),
    S(  -2,   34), S(  -2,   21), S(   2,    6), S(  24,  -26), S(  33,  -21), S(  36,  -12), S(   4,    7), S(  -2,    9),
    S(   5,   76), S(  27,   62), S(  40,   32), S(  33,   -4), S(  48,   -8), S(  95,   13), S(  47,   34), S(  16,   43),
    S(  50,   69), S(  37,   60), S(  39,   37), S(  33,    9), S(  37,    0), S(  14,    8), S(   3,   24), S(   3,   40),
    S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0), S(   0,    0),
};

constexpr int meg_knight_table[64] = {
    S( -53,  -57), S( -20,  -41), S( -24,  -27), S( -19,   -7), S( -11,   -8), S( -15,  -21), S( -21,  -23), S( -50,  -43),
    S( -33,  -19), S( -36,  -12), S( -25,  -27), S(  -9,   -6), S( -13,   -6), S( -23,  -27), S( -31,   -6), S(  -8,   -8),
    S( -31,  -31), S( -13,  -16), S( -13,    2), S(   2,   20), S(   4,   17), S(  -8,   -2), S(  -6,  -12), S( -17,  -24),
    S(  -2,   -2), S(  11,    6), S(  11,   35), S(  16,   40), S(  17,   35), S(  16,   35), S(  32,    8), S(  15,   10),
    S(   0,   -6), S(   8,    9), S(  26,   31), S(  23,   41), S(  11,   47), S(  32,   29), S(   7,   21), S(   7,    3),
    S( -19,  -15), S(  11,    0), S(  28,   26), S(  42,   21), S(  63,   19), S(  53,   33), S(  34,    4), S(   3,   -8),
    S( -19,  -19), S( -14,   -4), S(  24,   -9), S(  33,   19), S(  24,   20), S(  20,   -4), S(  -4,  -10), S( -21,  -15),
    S( -60,  -67), S( -10,  -10), S( -17,   -6), S(  -2,   -7), S(   2,   -1), S( -12,   -5), S( -16,  -16), S( -58,  -47),
};

constexpr int meg_bishop_table[64] = {
    S(  17,   -5), S(   5,    2), S(   2,   -4), S(  -8,   -8), S( -10,   -3), S(   2,    1), S(  -1,    1), S(  15,   -7),
    S(  13,   -9), S(   9,  -19), S(   0,   -8), S(  -9,    1), S(  -7,    3), S(  -5,  -15), S(  14,  -15), S(  12,  -20),
    S(  -3,   -4), S(   8,    7), S(   5,   12), S(   6,   15), S(   6,   15), S(  10,    8), S(  14,   -2), S(  13,    4),
    S( -10,   -2), S(   1,    2), S(   5,   19), S(  20,   18), S(  21,   16), S(   2,   16), S(   2,    6), S(   2,   -3),
    S( -16,    4), S(  22,   16), S(  12,   11), S(  45,   14), S(  30,   23), S(  18,   13), S(  17,   23), S( -12,   11),
    S(  -1,    8), S(  15,   20), S(  32,   17), S(  22,   10), S(  32,   15), S(  35,   28), S(  26,   22), S(   8,    9),
    S( -31,    0), S(   0,   14), S(  -4,   11), S(  -1,    9), S(   3,    9), S(   2,   10), S(  -7,   10), S( -19,    1),
    S(  -6,    4), S(   1,    0), S(  -8,    8), S(  -6,    7), S(  -4,    7), S( -17,   -1), S(  -5,    5), S(  -2,    0),
};

constexpr int meg_rook_table[64] = {
    S( -23,  -11), S( -17,  -11), S( -17,   -8), S(  -8,  -19), S( -12,  -22), S(  -9,  -14), S(  -5,  -20), S( -14,  -27),
    S( -56,  -21), S( -26,  -22), S( -20,  -16), S( -14,  -20), S( -13,  -23), S( -16,  -34), S( -15,  -28), S( -44,  -22),
    S( -34,  -17), S( -19,   -4), S( -31,   -8), S( -23,  -15), S( -25,  -16), S( -26,  -15), S(   3,  -16), S( -22,  -21),
    S( -24,    8), S( -15,   19), S( -20,   20), S( -14,   12), S( -17,    9), S( -15,    9), S(   6,   10), S(  -5,   -2),
    S(  -3,   25), S(  12,   23), S(  20,   26), S(  42,   18), S(  34,   18), S(  32,   15), S(  29,   15), S(  20,   19),
    S(   2,   32), S(  40,   20), S(  29,   30), S(  49,   20), S(  58,   16), S(  50,   27), S(  48,   15), S(  32,   21),
    S(   7,   36), S(  -1,   41), S(  25,   37), S(  36,   40), S(  31,   41), S(  33,   28), S(  27,   28), S(  29,   27),
    S(  29,   40), S(  23,   46), S(  22,   46), S(  19,   43), S(  33,   40), S(  18,   50), S(  23,   47), S(  20,   51),
};

constexpr int meg_queen_table[64] = {
    S( -21,  -27), S( -23,  -41), S( -16,  -52), S(  -8,  -59), S( -13,  -50), S( -27,  -48), S( -22,  -27), S( -24,  -21),
    S( -18,  -19), S(  -8,  -30), S(   4,  -64), S(   0,  -34), S(   3,  -43), S(  -8,  -63), S( -13,  -47), S( -20,  -24),
    S( -17,  -19), S(   1,  -19), S(  -9,   -4), S( -12,  -19), S(  -8,  -22), S( -13,   -2), S(   5,  -22), S(  -6,   -2),
    S(  -9,   -7), S(  -3,   -1), S( -11,    1), S( -18,   30), S( -12,   22), S(  -7,   26), S(   5,   18), S(  12,   22),
    S(  -9,  -13), S(  -5,   12), S(  -8,   -5), S(  -7,   28), S(   6,   36), S(  12,   43), S(  35,   42), S(  19,   30),
    S( -15,   -2), S(  -3,  -11), S(  -7,    6), S(   8,   14), S(  35,   32), S(  57,   50), S(  64,   45), S(  42,   32),
    S( -14,   -4), S( -64,   23), S( -11,   14), S(  -5,   23), S(   5,   50), S(  35,   33), S(  -9,   10), S(   6,   13),
    S(  -2,    5), S(  10,   12), S(  24,   15), S(  21,   33), S(  27,   35), S(  27,   27), S(  10,   10), S(  23,   21),
};

constexpr int meg_king_table[64] = {
    S(  -4,  -91), S(  42,  -79), S(   9,  -49), S( -22,  -55), S(  -4,  -85), S( -45,  -44), S(  35,  -80), S(  16, -151),
    S(  38,  -49), S(  29,  -26), S(  13,   -7), S( -42,    8), S( -21,    1), S( -16,   -3), S(  30,  -36), S(  33,  -71),
    S(   0,  -33), S(  30,   -5), S(  15,   22), S(  -8,   42), S(  18,   35), S(  18,   17), S(  37,  -14), S(  -6,  -43),
    S(   8,  -28), S(  -1,   24), S(  13,   54), S(  10,   71), S(   9,   70), S(  10,   51), S(  22,   17), S( -21,  -33),
    S( -16,    1), S(  -7,   44), S( -16,   70), S(  10,   74), S( -12,   77), S(  10,   64), S( -13,   47), S( -25,  -11),
    S( -25,   -6), S( -19,   56), S( -17,   64), S(  -4,   49), S(  -8,   45), S(  -1,   68), S( -12,   60), S( -39,   -6),
    S( -62,  -33), S( -32,   23), S( -55,   35), S( -62,   13), S( -37,   24), S( -53,   29), S( -36,   31), S( -54,  -30),
    S( -73,  -51), S( -54,  -27), S( -72,    6), S( -66,   20), S( -76,    5), S( -70,  -25), S( -67,  -15), S( -64,  -67),
};


//------------------------------------------------------------
//  Mobilité
constexpr Score KnightMobility[9] = {
    S(-58,-54), S(-24,-67), S( -4,-23), S(  6, 14), S( 15, 29), S( 18, 49), S( 26, 52),
    S( 36, 48), S( 51, 28)
};

constexpr Score BishopMobility[14] = {
    S(-55,-95), S(-19,-92), S( -1,-37), S(  6, -4), S( 14, 13), S( 21, 37), S( 25, 53),
    S( 23, 61), S( 22, 69), S( 27, 69), S( 31, 66), S( 58, 52), S( 59, 68), S( 49, 51)
};

constexpr Score RookMobility[15] = {
    S(-59,-69), S(-28,-58), S(-13,-35), S(-12,-17), S( -5, 15), S( -3, 35), S( -3, 54), S(  2, 57),
    S(  9, 61), S( 17, 66), S( 26, 70), S( 28, 71), S( 29, 73), S( 43, 61), S( 88, 35)};

constexpr Score QueenMobility[28] = {
    S(-62,-48), S(-70,-36), S(-66,-49), S(-45,-50), S(-27,-46), S( -9,-45), S(  2,-37), S(  9,-23),
    S( 14, -7), S( 19,  9), S( 21, 24), S( 24, 34), S( 28, 39), S( 27, 49), S( 29, 55), S( 28, 63),
    S( 26, 69), S( 26, 69), S( 24, 73), S( 29, 72), S( 34, 74), S( 51, 63), S( 60, 69), S( 79, 66)};

//------------------------------------------------------------
//  Bonus car on a le au trait
constexpr int Tempo = 15;

//  Pions
constexpr Score PawnPassed[8] = {
    S(  0,  0), S(-16, 22), S(-16, 25), S( -7, 56), S( 26, 80), S( 60,139), S(136,196), S(  0,  0),
};
constexpr Score PawnDoubled  = S(-14,-25);
constexpr Score PawnIsolated = S(-15,-18);
constexpr int   PawnSupport  = S( 13,  5);

//  Colonnes Ouvertes
constexpr Score RookOpenFile      = S( 28, 10);
constexpr Score RookSemiOpenFile  = S(  9, 15);
constexpr Score QueenOpenFile     = S( -9,  5);
constexpr Score QueenSemiOpenFile = S(  1,  5);

//  Imbalances
constexpr Score BishopPair = S( 26, 100);

//  Sécurité
constexpr Score KingLineDanger = S(-12, 4);


#endif // EVALUATE_H
